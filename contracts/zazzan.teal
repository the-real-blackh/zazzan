#pragma version 6
q_safe:
    txn Fee
    int 10000
    <=

    txn CloseRemainderTo
    global ZeroAddress
    == 
    txn CloseRemainderTo
    global CreatorAddress
    ==
    ||
    &&

    txn RekeyTo
    global ZeroAddress
    ==
    &&

    txn OnCompletion  // UpdateApplication (4) or DeleteApplication (5)
    int 4
    >=
    txn Sender        // then sender must be creator
    global CreatorAddress
    !=
    &&
    !
    &&

    assert

app_calls:
    txn TypeEnum
    int 6
    ==
    txn OnCompletion  // No-Op or Opt-In, meaning it's either an app creation or an app call
    int 2
    <
    &&
    bz app_calls_end

// Handle the different named app calls

    txn ApplicationArgs 0
    pushbytes "toZAN"
    ==
    bnz app_call_toZAN

    txn ApplicationArgs 0
    pushbytes "toFiat"
    ==
    bnz app_call_toFiat

    txn ApplicationArgs 0
    pushbytes "propose"
    ==
    bnz app_call_propose

    err

app_calls_end:
    int 1
    return

// Output: Asset ID of the ZAN asset
ZAN_asset:
    pushbytes "ZAN"
    app_global_get
    retsub

// Output: Asset ID of the USDC asset
USDC_asset:
    pushbytes "USDC"
    app_global_get
    retsub

// Ensures we are a member of a transaction block where the first transaction is a
// transfer of a specified asset to us.
// Input: Asset ID
// Output: Value of said asset that was sent to us
get_sent_value_of_2:
    int 2
// Input: Asset ID / number of transactions asserted to be in the current group
get_sent_value_of_X:
    global GroupSize
    ==
    // Ensure we are a member of a transaction block where the first transaction is a
    // transfer of USDC to us.
    gtxn 0 TypeEnum
    int 4
    ==
    &&
    swap
    gtxn 0 XferAsset
    ==
    &&
    gtxn 0 AssetReceiver
    global CurrentApplicationAddress
    ==
    &&
    assert

    gtxn 0 AssetAmount
    retsub

// Input: recipient / Asset ID / Amount
// Output: --
send_asset:
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    int 4
    itxn_field TypeEnum
    retsub

USDCToZAN:
    // Subtract the amount just sent, because the balance reported by
    // Algorand is the balance AFTER receiving the new money.
    callsub USDC_balance
    callsub USDC_asset            // Amount just sent to us
    callsub get_sent_value_of_2
    -
    dup
    bnz USDCToZAN_proportion

    pop

    int 10000     // Default valuation if zero ZANs have been issued ever
    mulw
    int 6261      // NZD value in USD at time of writing
    divw
    retsub

USDCToZAN_proportion:
    // On stack: amount received \ USDC_balance(corrected)
    swap
    // On stack: USDC_balance(corrected) \ amount received
    callsub circulating_supply
    mulw
    // On stack: USDC_balance(corrected) \ amount * circ_supply [msw] \ amount * circ_supply [lsw]
    uncover 2
    divw
    retsub

ZANToUSDC:
    // Add the amount just sent to the circulating supply, because
    // the circulating supply we are reading is the amount after the
    // amount just sent to us has been subtracted from it.
    // So we add to correct it back to where it was beforehand.
    callsub circulating_supply
    callsub ZAN_asset            // Amount just sent to us
    callsub get_sent_value_of_2
    +             
    dup
    bnz ZANToUSDC_proportion

    pop   // circulating supply(corrected)
    pop   // amount received

    // If this is the last of the ZAN, then send it all remaining USDC.
    callsub USDC_balance
    retsub

ZANToUSDC_proportion:
    // On stack: amount received \ circulating supply(corrected)
    swap
    // On stack: circulating supply(corrected) \ amount received
    callsub USDC_balance
    mulw
    // On stack: circ_supply(corrected) \ amount * USDC_bal [msw] \ amount * USDC_bal [lsw]
    uncover 2
    divw
    retsub

// Convert USDC to ZAN
app_call_toZAN:
    // Receiving USDC, transfer ZAN back to the sender.
    itxn_begin
    gtxn 0 Sender            // recipient
    callsub ZAN_asset        // asset ID
    callsub USDC_asset       // amount
    callsub get_sent_value_of_2
    callsub USDCToZAN
    callsub send_asset
    itxn_submit

    callsub update_adminFundCap

    int 1
    return

// The admin fund cap is the largest that admFundFrac * circulating supply has
// ever been. So we calculate it, and update it if it's larger than the present
// value.
update_adminFundCap:

    // Calculate admFuncFrac fraction of total circulating supply
    callsub circulating_supply
    pushbytes "c_admFundFrac_bp"
    app_global_get
    mulw
    int 10000
    divw

    dup 
    pushbytes "c_admFundCap_Z"
    app_global_get
    <
    bnz update_adminFundCap_end

    pushbytes "c_admFundCap_Z"
    dig 1       // Leave it on the stack to get popped below
    app_global_put

update_adminFundCap_end:
    pop
    retsub

// Get the total number of ZANs, which equals ZANs in circulation - reserve (dragon's lair)
total_ZANs:
    callsub ZAN_asset
    asset_params_get AssetTotal
    retsub

// Amount of USDC we hold.
USDC_balance:
    global CurrentApplicationAddress
    callsub USDC_asset
    asset_holding_get AssetBalance
    pop                   // Discard the value of whether we are opted into the asset
    retsub

admin_fund_address:
    pushbytes "admFund"
    app_global_get
    retsub

admin_fund_balance:
    callsub admin_fund_address
    callsub ZAN_asset
    asset_holding_get AssetBalance
    pop                   // Discard the value of whether we are opted into the asset
    retsub

// Return the number of ZANs in circulation
circulating_supply:
    callsub ZAN_asset
    asset_params_get AssetTotal
    pop
    global CurrentApplicationAddress
    callsub ZAN_asset
    asset_holding_get AssetBalance
    pop                   // Discard the value of whether we are opted into the asset
    -
    retsub

// Convert ZAN to USDC
app_call_toFiat:
    callsub ZAN_asset        // amount
    callsub get_sent_value_of_2

    // calculate exit tax
    dup
    pushbytes "c_exitTax_bp"
    app_global_get
    mulw
    int 10000
    divw
    dup
    store 0    // store exit tax amount to scratchpad 0
    -          // subtract from amount received to give amount less tax
    store 1    // store ZAN amount less exit tax to scratchpad 1

    // Transfer USDC back to the sender.
    itxn_begin
    gtxn 0 Sender            // recipient
    callsub USDC_asset       // asset ID
    load 1                   // Convert the ZANs less tax to fiat
    callsub ZANToUSDC
    callsub send_asset

    load 0                   // Add the tax to the admin fund
    callsub add_to_admin_fund

    itxn_submit

    int 1
    return

// Send the specified number of ZANs to the admin fund
add_to_admin_fund:
    // get admin fund balance into scratchpad 0
    callsub admin_fund_balance
    store 2

    // get our cap on admin fund balance into scratchpad 1
    pushbytes "c_admFundCap_Z"
    app_global_get
    store 3

    // is admin fund balance + our caller's ZAN contribution < the cap ?
    dup
    load 2
    +
    load 3
    <
    bnz add_to_admin_fund_send  // Adding it won't exceed cap? Send it all.

    pop

    // Is the admin fund balance as it is now below the cap?
    load 2
    load 3
    <
    bnz add_to_admin_fund_bal_below_cap

    retsub

add_to_admin_fund_bal_below_cap:
    // Then send the right amount to bring it up to the cap.
    load 3
    load 2
    -

add_to_admin_fund_send:
    itxn_next

    callsub admin_fund_address
    callsub ZAN_asset
    uncover 2
    b send_asset

app_call_propose:
    global GroupSize
    int 2
    ==
    gtxn 0 TypeEnum
    int 6
    ==
    &&
    gtxn 0 ApplicationID
    int 0
    ==
    &&
    gtxn 0 OnCompletion
    int NoOp
    ==
    &&
    gtxn 0 ApprovalProgram   // ApprovalProgram must be correct so we don't trust unknown code
    sha256
    byte base64 QzYhq9JlYbn2QdOMrhyxVlNtNjeyvyJc/I8d8VAGfGc=   // TO DO: Put real value in here
    ==
    &&
    gtxn 0 ClearStateProgram  // ClearStateProgram must be correct
    sha256
    byte base64 QzYhq9JlYbn2QdOMrhyxVlNtNjeyvyJc/I8d8VAGfGc=   // TO DO: Put real value in here
    ==
    &&
    assert

    gaid 0  // Get application ID of the newly created proposal election
    int 0   // loop index
propose_loop:
    pushbytes "ele__"   // We're about to replace __ with two digits for the loop index 00 -> 99
    int 3   // character index of first digit
    dig 2   // get loop index
    int 10
    /
    int 48
    +
    setbyte 
    int 4   // character index of second digit
    dig 2   // get loop index
    int 10
    %
    int 48
    +
    setbyte 
    dup
    app_global_get
    int 0
    ==
    bnz propose_found_empty_slot
    pop

    int 1   // increment loop index
    +
    dup
    int 20
    <
    bnz propose_loop
    err     // Fail because all slots are full

// Current stack:
//   application ID
//   loop index
//   field name
propose_found_empty_slot:
    swap
    pop
    swap
    // Current stack: field name / application ID
    app_global_put

    int 1
    return
